Всем привет, я-Салтрукович Юлия и вы смотрите 2 урок курса основы Oracle Application Express на канале LoftBlog.
В данном уроке мы познакомимся с интерфейсом oracle application express и создадим и заполним таблицы для нашей базы данных.
Итак, начнем.
В прошлом уроке мы создавали workspace и пользователя через панель администратора Oracle XE, но  есть еще , панель администратора Oracle Application Express. Ссылка на данную панель находится на странице входа в APEX. Для того, что бы попасть на страницу администратора, необходимо задать пароль. Пароль мы будем задавать через командную строку. Для этого, открываем командную строку и переходим по указанному пути(это папка, в которую мы установили oracle xe).
Запускаем sqlplus под логином system, далее запускаем скрипт @apxchpwd, данный скрипт позволяет задать пароль для администратора oracle apex.
Данное сообщение появится, если пароль задан успешно.
Задали пароль и пробуем залогиниться. Мы видим, что apex требует изменения текущего пароля. Такое действие требуется в целях безопасности.
Мы на странице администратора Oracle Apex. Данная страница используется для доступа и выполнения задач администрирования Oracle Application Express.
Здесь можно производить различные действия со всеми созданными рабочими пространствами(удалять, изменять, блокировать), а так же, создавать новые workspace, производить их импорт и экспорт, создавать и изменять пользователей apex, настраивать таймаут сессий, политику паролей пользователей и другое.  
Давайте попробуем поработать здесь. 
Напомню, что в панели администратора Oracle XE, workspace, пользователь базы данных и схема назывались одним именем.
Создадим сначала workspace. Переходим по ссылке, вводим название рабочей области, можем так же ввести ее идентификационный номер и описание, но это не обязательно. 
Далее, выбираем, будем работать с уже имеющейся схемой или создадим новую. В нашем, случае, создаем новую, опять же, название схемы и имя пользователя данной схемы одно и то же. Придумываем пароль.
Так же, необязательным является задание ограничения максимального размера tablespace.(по умолчанию 100 мегабайт).

Табличные пространства в Oracle — это логические структуры хранения данных. Oracle использует их для хранения объектов базы данных, таких как индексы, таблицы и т. п. Табличное пространство содержит сегменты и состоит из одного или нескольких файлов данных. Tablespace отражают места хранения данных на физических носителях. Oracle хранит данные логически в табличных пространствах, а физически — в файлах данных, связанных с определённым пространством.

Сегменты — это области на диске, выделяемые под объекты — таблицы, индексы и т.д.

При создании таблицы создается сегмент таблицы. При создании секционированной таблицы создается по сегменту для каждой секции. При создании индекса создается сегмент индекса и т.д. Каждый объект, занимающий место на диске, хранится в одном сегменте. Есть сегменты отката, временные сегменты, сегменты кластеров, сегменты индексов и т.д.
Файлы данных-являются одними из наиболее важных в базе данных. Именно в них хранятся все данные. В каждой базе данных есть хотя бы один файл данных, но обычно их намного больше. 
Переходим дальше. 

Заполняем данные об администраторе нашей рабочей области. Можно использовать ранее созданных пользователей, а так же, создать нового.
В данном окне мы видим информацию о нашем почти созданном workspace. Видим название табличного пространства и имя и путь до файла данных схемы.
Давайте проверим, что изменилось в некоторых других вкладках.

Переходим по ссылке 
Manage Schema Assignments
Видим, что создана схема и привязана к определенной рабочей области.

Проверим пользователей.
Переходим на следующую вкладку
Manage Developers and Users
Видим, что наш пользователь создан, привязан к определенным workspace и схеме. Карандашик слева от записи указывает на то, что данную запись можно редактировать.

Посмотрим, что мы можем изменить.
Во-первых, можем изменить описание пользователя, добавить почту, фамилию, имя.
Во-вторых, привилегии аккаунта. изменить workspace, схему, права ( администратор, разработчик или обычный пользователь), убрать или разрешить доступ к определенным режимам работы в Oracle Apex. Так же, можно заблокировать пользователя.

В-третьих, работа с паролем. Создать новый пароль, изменить пароль при первом входе в систему или установить для пароля истекший срок годности. Если выбрать данное свойство, то при очередном входе в oracle Apex, пользователю будет предложено ввести новый пароль, взамен старого.

Итак, workspace мы создали, пользователя и схему тоже. Выходим из панели администратора APEX  и коннектимся под только что созданной учетной записью и начинаем работу в Oracle Apex.

Oracle Application Express полностью размещается в базе данных. 

В не зависимости от того запускаете ли вы среду разработки или уже готовое приложение, созданное в Oracle Application Express, выполняются одни и те же процессы. Ваш браузер посылает URL-запрос, который преобразуется в соответствующий вызов Application Express PL/SQL. 
База данных обрабатывает PL/SQL запрос и отправляет результат обратно в браузер в виде HTML. 
Эти операции выполняются всегда при запросе или получении страницы. 
Состояние сессии приложения хранится в базе данных под управлением Application Express. Особое специальное соединение не используется. Вместо этого, каждый запрос делается в новой сессии базы данных, затрачивая минимум ресурсов CPU.
 
 Итак, мы на домашней странице Oracle APEX. Что мы видим? 

 В состав Apex входят четыре основных компонента:

Application Builder –  среда создания приложения, состоящего из набора HTML-страниц, на основе объектов базы данных.
На данной странице распологаются все приложения, которые созданы вами в данном рабочем пространстве. Так же, тут расположено демо приложение, созданное по умолчанию Oracle Apex, мне оно очень помогло при создании своих приложений на начальных этапах. Здесь показаны основные моменты работы в Apex, создание отчетов, графиков, процессов, регионов и т.д. Полезная штука, посмотреть стоит. Также,  Операции импорта и экспорта и миграция приложений.

SQL Workshop – среда управления объектами базы данных (индексы, таблицы, представления и т. п.). Данная среда Включает в себя мастера создания SQL запросов для пользователей, которые не обладают знаниями в языке SQL, а также предоставляет инструменты для просмотра и управления объектами базы данных. 
Такие, как:
	1. Object Browser-Обозреватель объектов - это окно в вашу базу данных.Выбираем нужный тип объекта, а затем выбераем объект. Все детали этого объекта доступны для просмотра и редактирования. Object Browser позволяет:

-Просмотр объектов по типу объекта и схеме
-Создание объектов с помощью мастеров
-Просмотреть синтаксис SQL create
-Просмотр подчиненных объектов
-Изменение существующих объектов
-Зависимости отчетов
-Просмотр данных для таблиц и представлений

	2. SQL-commands Команды SQL используются для обработки любой команды SQL или выполнения любого блока кода PL / SQL. 
	   Возможности SQL-commands включают:
-Выполнение SQL-команд или блоков PL / SQL
-Просмотр планов объяснений запросов и операций DML
-Результаты запроса отображаются в табличном результирующем наборе
-Описание объектов базы данных
-Сохранение SQL-запросов для последующего использования
-Доступ к истории команд

	3. SQL Script Сценарии SQL

Скрипты могут содержать один или несколько операторов SQL. Скрипты запускаются в фоновом режиме, и вы можете отслеживать ход выполнения и просматривать связанные отчеты. Результаты SQL Script архивируются для справки. Скрипты могут вызывать другие скрипты, поэтому все операторы не должны размещаться в одном скрипте. Возможности включают:

Загрузка и обновление SQL-скриптов
Выполнение скриптов в фоновом режиме
Просмотр журналов результатов скриптов

	4. Query Builder

Построитель запросов позволяет создавать запросы графически, таблицы и представления расположены на панели слева. 	Соединения могут быть определены путем перетаскивания соответствующих имен столбцов. Запрос можно протестировать и затем сохранить для последующего использования. Возможности включают:

Перетаскивание таблиц и просмотров для запроса
Графическое соединение таблиц
Выполнение запросов и просмотр результатов
Просмотр синтаксиса SQL-запроса
Автоматическое обнаружение соединений из словаря данных

По умолчанию пользовательский интерфейс

Чтобы повысить производительность разработки приложений, , функция утилиты SQL Workshop,пользовательские настройки по умолчанию, User Interface Defaults поддерживает спецификацию дружественных имен и других атрибутов. Это позволяет  создавать и в дальнейшем использовать по умолчанию дружественное имя, а не фактическое имя. Вы можете определять лейблы(label), формат масок, текст справки и другие атрибуты.

Дополнительные функции:

Синхронизация страниц с пользовательским интерфейсом. По умолчанию управляемые метки и маски формата
Управление пользовательскими интерфейсами По умолчанию по таблице и столбцу или по имени атрибута
Заполнение пользовательских интерфейсов по умолчанию из заполненных форм или страниц отчета


В дополнение к настройкам по умолчанию для пользовательского интерфейса существует множество других утилит. К ним относятся:

Data Workshop - загрузка и выгрузка данных в форматах текста, XML и электронных таблиц
Object Reports-Отчеты объектов - просмотр отчетов обо всех объектах, доступных для рабочей области
Generate DDL  - создание DDL для всех или выбранных объектов в схемах
Recycle Bin Корзина - просмотр и восстановление удаленных объектов
Schema Comparison Сравнение схем. Просмотр различия между двумя схемами, доступными для текущего рабочего пространства.



Team Development - помогает управлять жизненным циклом разработки приложения. оОбеспечивает отслеживание и управление функций приложения,планов, ошибок и обратной связи с конечными пользователями. Team Development тесно интегрирована с Application Builder. Например, на странице редактирования отображается обратная связь, баги и планы.


Administration –дает вам возможность редактировать учетную запись. В зависимости, от ваших привелегий,можно мониторить и администрировать текущую рабочую область. Так же возможность управления пользователями, настройками, правами доступа и просмотр отчетов. 

Каждое рабочее пространство Oracle Application Express представляет собой отдельную среду разработки приложений, которая полностью изолирована от других рабочих областей.
 Компонент администрирования обеспечивает управление рабочими пространствами, включая службы (доступные схемы, запросы и предпочтения в пространстве), пользователей (как разработчиков, так и конечных пользователей) и активность рабочей области (просмотры страниц, попытки входа и активность разработчика). Доступ ограничивается разработчиками Oracle Application Express, у которых есть привилегии администратора рабочей области.

Подробнее, обо всех особенностях Oracle APEX можно узнать перейдя по данной ссылке. 
Здесь находится краткое описание режимов oracle apex, а так же сбоку справа панель с различными примерами работы с данными в apex.

Теперь, прежде чем мы начнем создавать приложение, надо создать объекты базы данных, с которыми мы будем работать-таблицы.
Переходим на вкладку SQL Workshop
Справа, выбираем схему по умолчанию, с которой мы будем работать.
если вы знакомы с языком структурированных запросов SQL, то используйте режим SQL commands, а если нет-то режим Object Browser.

Предметной областью нашей базы данных будет библиотека. Вы являетесь библиотекарем, в чьи обязанности входит ввод данных о  книгах, авторах, заполнять или изменять данные читательского билета, а так же, заносить данные о том, какую книгу на какое время и какому читателю выдали. 

Итак, создаем 4 таблицы:

Читатели(readers), Книги(books), Авторы(authors) и таблица Выдача книг(Orders).
Наименования таблиц и их столбцы представлены на слайде.

Читатели(readers)
reader_id
first_name
last_name
telephone
address

Книги(books)
book_id
title
author_id
cover (хранится файл) blob
FILENAME имя файла
MIMETYPE тип файла
FILEDATE датаобновления
FILECHARSET кодировка
Discrabe описание



Авторы(authors)
author_id
first_name
last_name


Выдача книг(Orders)
order_id
reader_id
book_id
date_out
date_in

В таблице Книги поля cover (хранится файл) blob
FILENAME имя файла
MIMETYPE тип файла
FILEDATE датаобновления
FILECHARSET кодировка
Discrabe описание нужны для отображения обложки книги. Мы разберем эти поля позже.

Режим Object Browser состоит из двух панелей: панель "Выбор объекта" 
отображает объекты базы данных выбранного типа в текущей схеме

и панель "Детали объекта" отображает подробную информацию о выбранном объекте. 

Чтобы просмотреть сведения о объекте, выбераем объект в панели «Выбор объекта». и перебираем вкладки в верхней части панели «Детали», чтобы просмотреть дополнительные сведения о текущем объекте. Чтобы отредактировать объект, нажимаем соответствующую кнопку.

Если мы кликнем на любой объект, к примеру, таблица, то в данной панели мы увидим всю информацию о ней. К примеру, на вкладке "table" отображается информация о первых 57 столбцах данной таблицы, их названия, тип, значение по умолчанию, является ли столбец первичным ключом или нет, статус null. 

При просмотре сведений о таблице можно изменять, удалять, добавлять, переименовывать, копировать столбцы, ндексы,  триггеры, ограничения, зависимости и таблицу, просматривать данные, которые содержатся в ней, синстаксис sql create, добавлять и строить запросы к просматриваемой таблице. Для редактирования записи, нажимаем на карандашик, изменяем данные и сохраняем изменения.

Так же, можно осуществлять поиск объектов базы данных по имени.

Для создания таблицы нажимаем на кнопку CREATE и выбираем тип объекта, который хотим создать-таблица. Сначала, будем создавать таблицы, не имеющие в своем составе внешних ключей.
Вводим название таблицы.
Если Вы хотите сохранить регистр, то выберите данное свойство.
Далее, вводим имена столбцов.
Выбираем тип данных, который мы сможем вводить в таблицу в данное поле.
varchar2 это символьные строки переменной длины, а Тип данных NUMBER используется для хранения нуля и положительных или отрицательных чисел с фиксированной и плавающей точкой.
Появились дополнительные поля для заполнения информации по столбцам.
это Точность. Точность - это количество цифр до десятичной точки. Должно быть положительным числом.
Масштаб - функция настройки масштаба зависит от типа столбца. Для типов NUMBER масштаб - это количество цифр после десятичной точки. Для типов VARCHAR2 и CHAR масштаб - это количество сохраненных символов. 
значение NOT NULL, если мы хотим, что бы данный столбец не имел пустых значение, то устанавливаем галочку NOT NULL.
Для нас являются обязательными все столбцы, мы ведь хотим знать все о наших читателях.
Так же, обязательным всегда будет значение столбца, который мы делаем первичным ключом.
 Под первичным ключом понимают поле или набор полей, однозначно (уникально) идентифицирующих запись.
 Никакие из двух записей таблицы не могут иметь одинаковых значений первичного ключа. 

  Если поле в таблице имеет повторяющиеся значения, то оно не может быть первичным ключом.
 Первичный ключ является обязательным полем при создании таблицы, в реляционных базах данных практически всегда разные таблицы логически связаны друг с другом. 
 Первичные ключи как раз используются для однозначной организации такой связи.
идем дальше.
определяем первичный ключ
выбираем из 4 вариантов:
No Primary Key (в таблице нет первичного ключа)
Populated from a new sequence (Заполнять из новой последовательности) создает первичный ключ и создает триггер и последовательность. Последовательность используется в триггере для заполнения выбранного столбца первичного ключа. Первичный ключ может быть только одним столбцом.
Populated from an existing sequence  Заполняется из существующей последовательности. Создает первичный ключ и создает триггер. Выбранная последовательность используется в триггере для заполнения выбранного столбца первичного ключа. Первичный ключ может быть только одним столбцом.
Not populated Не заполняется. Определяет первичный ключ, но не имеет значения, автоматически заполняемого последовательностью в триггере. Вы также можете выбрать эту опцию для определения составного первичного ключа (то есть первичного ключа, состоящего из нескольких столбцов)
 Мы выбираем запонять из новой последовательности. Название constraint, выбираем поле, которое будет первичным ключем, и название новой последовательности. Оставим названия, которые указал oracle apex, они понятны и в названии содержится описание.
 Здесь идем дальше, ничего не трогаем, рассмотрим данный регион при создании других таблиц, где будут внешние ключи.
 Здесь предлагается добавить ограничения целостности на данные в таблице. 
 В начале мы уже поставили галочки, что наши данные будут not null, то есть, все обязательные, не будет пустых значений. Так же, мы определили первичный ключ. Все это одни из вариантов ограничений.
 Ниже представлены примеры ограничений, которые можно создать. Идем дальше.
 СТраница подтверждения. Здесь мы видим, как наши действия описаны при помощи sql-операторов. 
 Создаем таблицу, нажав на кнопку create.
 Теперь мы можем увидить нашу таблицу слева, в списке таблиц нашей схемы. Выбираем нашу таблицу, видим созданные нами столбцы, вкладка ограничения тоже заполнена, создан триггер на заполнение поля первичного ключа.
 Можем внести данный в нашу таблицу.Переходим на вкладку Data и нажимаем кнопку INSERT ROW. Заполняем соответсвующие поля, кроме поля с первичным ключом, оно у нас заполняется автоматически при помощи триггера. кнопка CREATE и мы видим нашу первую введенную запись.
 На примере таблицы READERS создаем таблицы 

Издательства(publishers)
Авторы(authors)

Они без внешних ключей и заполняются аналогично.

Заполним теперь таблицу с внешним ключем books
Заполняем так же, как и предыдущие таблицы.
Данные поля  нужны для отображения обложки книги. Мы разберем их позже.

cover (хранится файл) blob
FILENAME имя файла
MIMETYPE тип файла
FILEDATE датаобновления
FILECHARSET кодировка
Discrabe описание 


Книги(books)
book_id
title
author_id
cover (хранится файл) blob
FILENAME имя файла
MIMETYPE тип файла
FILEDATE датаобновления
FILECHARSET кодировка
Discrabe описание


Внешний ключ нужен для связи между таблицами, когда поле одной таблицы содержит первичный или уникальный ключ другой. 

То есть, значение в  поле author_id будет соответствовать  первичному ключу в таблице authors для того автора, который написал данную книгу.
Выбираем поле, которое будет внешним ключом в нашей таблице, выбираем родительскую таблицу и поле, на которое будет ссылаться внешний ключ. В нашем случае, это первичный ключ. Так же, можно указать каскадные ограничения целостности.
Выбираем первый пункт, что бы запретить удалять строки из указанной таблицы, когда в этой таблице есть зависимые строки.
Выбираем второй пункт, чтобы разрешить удаление зависимых строк из дочерней таблицы, когда удаляются соответсвующие строки из родительской.
И третий пункт, задает внешнему ключу значение null, когда соответствующие строки родительской таблицы удалены.
Я выберу каскадное удаление, далее, кнопка добавить и далее, все заполняется как и в предыдущих таблицах.
После создания таблиц переходим в режим object browser, проверяем что все наши таблицы созданы правильно, и переходим к заполнению.


На вкладке "DATA", заполнять каждую строку вручную, отдельно это долго. Заполним таблицу authors данными  через файл. Для этого, создадим текстовый файл с именами и фамилиями авторов. 
Далее, переходим по ссылке
Utilities -> Data WorkShop
Данные можно загрузить в текстовом, xml и табличном форматах. Так же, можно выгрузить данные. Выбираем тип файла, так же, можно указать, что мы хотим загрузить данные в новую таблицу, тогда 
 надо будет указать имя новой таблицы  в дальнейшем и именно туда будут загружены данные из файла, либо выбрать существующую таблицу, тип загрузки( из файла или копипаст непосредственно текста), 

Далее, выбираем схему, таблицу,

 далее, выбираем файл, тип разделителя ( в моем случае это запятая), если первая строка содержит названия столбцов вашей таблицы, то ставим галочку, тип кодировки, можно так же указать десятичный разделитель, разделитель групп -это символ, который разделяет целые группы, например, чтобы показать тысячи и миллионы и международные символы валюты. 

Соединяем названия полей в базе данных с колонками данных, выбираем, обновлять данные в таблице или нет и нажимаем кнопку. Если не было сообщения об ошибке, то все было сделано верно. Переходим в режим работы с объектами ббазы данных, находим нашу таблицу и проверяем. Таблица заполнена правильными данными.

На этом урок завершен.

С вами была я, Салтрукович Юлия и Вы смотрели видеокурс установка и базовая настройка Oracle XE на канале LoftBlog. Ставьте лайки, оставляйте комментарии и подписывайтесь на канал LoftBlog.  

ЭКС - значит ИЗ (страны) . ИМ - значит В (страну). 

MYFILE (хранится файл) blob
FILENAME имя файла
MIMETYPE тип файла
FILEDATE датаобновления
FILECHARSET кодировка
Discrabe описание

в форме
Добавляем поля в settings-> storage type blob....

в отчете
report attributes myfile->number(date format)